#!/bin/bash
#*****************************************************
# This script provide functions for the other script.
#*****************************************************
# D. Malki : Creation 05/05/2020 VERSION: 1.00
# D. Malki : Evolution 03/02/2020 VERSION: 1.10
#*****************************************************
local_path=$(dirname $(readlink -f $0))
. $local_path/init-env
# FUNCTIONS
checkPath (){
  local path_to_check=$1
 #Check and create the folder
  if [ ! -d $path_to_check ]
  then
    mkdir $path_to_check
    chmod 755 $path_to_check
  fi
}
delFileIfExist (){
  local file=$1
  #Check and remove file if exists
  if [ -f $file ]
  then
    rm -f $file
  fi
}
delFolderIfExist (){
  local folder=$1
  #Check and and remove folder if exists
  if [ -d $folder ]
  then
    rm -rf $folder
  fi
}
checkIfRunning () {
  local ps_out=$(ps -ef | grep "$1" | grep -v 'grep')
  local result=$(echo $ps_out | grep "$1")
  if [[ "$result" != "" ]]; then
    RETVAL=0
  else
    RETVAL=1
  fi
}
getIrnFromUser () {
  local user_input=$1
  local irn_number=$(echo $user_input | awk -F '[/-]' '{print $3}')
  echo irn-$irn_number
}
getSIAFromUser () {
  local user_input=$1
  local sia=$(echo $user_input | awk -F '[/-]' '{print $4}')
  echo $sia
}
getSIAFromIrn(){
  local irn=$1
  local sia=$(ls -t /home/$clouder-$irn-* 2> /dev/null| head -n 1 | awk -F '[/-]' '{print $6}')
  echo $sia
}
getAccessTypeFromUser () {
  local user_input=$1
  local access_type=""
  read access_type <<< "${user_input##*-}"
  if [[ "$access_type" == "dba"* ]]; then
    echo "dba"
  else
    echo $access_type
  fi
}
getEnvFromUser () {
  local user_input=$1
  local env_user=$(echo $user_input | awk -F '[/-]' '{print $5}')
  echo $env_user
}
getBucketNameFromUser () {
  local user_input=$1
  local irn=$(getIrnFromUser $user_input)
  local sia=$(getSIAFromUser $user_input)
  local env=$(getEnvFromUser $user_input)
  local access_type=$(getAccessTypeFromUser $user_input)
  echo "$clouder-$irn-$sia-$env-db-$access_type"
}
getVaultPathFromUser () {
  local user_input=$1
  local output=$vault_db_path/$(getIrnFromUser $user_input)/api/$(getEnvFromUser $user_input)/$(getAccessTypeFromUser $user_input)
  echo $output
}
getVaultFieldFromUser () {
  local user_input=$1
  local field=$2
  echo $($vault_application kv get -address=http://localhost:8200 -field=$field $(getVaultPathFromUser $user_input))
}
getVaultFormattedFieldFromUser () {
  local user_input=$1
  local field=$2
  echo "$($vault_application kv get -address=http://localhost:8200 -field=$field $(getVaultPathFromUser $user_input))"
}
isDBAFromUser() {
  local user_input=$1
  local sia=$(getSIAFromUser $user_input)
  local irn=$(getIrnFromUser $user_input)
  local accessType=$(getAccessTypeFromUser $user_input)
  if [[ "$sia" == "dbi" && "$irn" == "irn-71982" && "$accessType" = "dba" ]]; then
    echo 1
  else
    echo 0
  fi
}
getListIrn() {
  local out=$($vault_application list -address=http://localhost:8200 $vault_db_path/)
  echo $out
}
getListEnv() {
  local envPath=$1
  local listEnv=$($vault_application list -address=http://localhost:8200 $envPath)
  local userEnv=$(getEnvFromUser $USER)
  local userEnvRoot="${userEnv:0:2}"
  local listReturn=""
  #create a list with the good env
  for env in $listEnv; do
    local envRoot="${env:0:2}"
    if [[ "$envRoot" == "$userEnvRoot" ]]; then
      listReturn="$listReturn $env"
    fi
  done
  echo $listReturn  
}
getListAllEnv() {
  local envPath=$1
  local listEnv=$($vault_application list -address=http://localhost:8200 $envPath)
  local listReturn=""
  for env in $listEnv; do
    if [[ "$env" != "Keys" ]];then
      if [[ "$env" != "----" ]]; then
        local env="${env::-1}"
        listReturn="$listReturn $env"
      fi
    fi
  done
  echo $listReturn
}
initDatasource() {
  $(delFileIfExist $local_user_dbeaver_datasource)
  echo "init datasource"
  #initialize file datasource
  echo "{">>$local_user_dbeaver_datasource
  echo "        \"folders\": {},">>$local_user_dbeaver_datasource
  echo "        \"connections\": {">>$local_user_dbeaver_datasource
}
writeDatasourcePgsql() {
  local index=$1
  local name=$2
  local host=$3
  local port=$4
  local database=$5
  local user=$6
  local password=$7
  if [[ "$index" != "1" ]]; then
    echo ",">>$local_user_dbeaver_datasource
  fi
  echo "                \"postgres-jdbc-${index}\": {">>$local_user_dbeaver_datasource
  echo "                                        \"provider\": \"postgresql\",">>$local_user_dbeaver_datasource
  echo "                                        \"driver\": \"postgres-jdbc\",">>$local_user_dbeaver_datasource
  echo "                                        \"name\": \"${name}\",">>$local_user_dbeaver_datasource
  echo "                                        \"save-password\": true,">>$local_user_dbeaver_datasource
  echo "                                        \"show-system-objects\": true,">>$local_user_dbeaver_datasource
  echo "                                        \"read-only\": false,">>$local_user_dbeaver_datasource
  echo "                                        \"configuration\": {">>$local_user_dbeaver_datasource
  echo "                                                \"host\": \"${host}\",">>$local_user_dbeaver_datasource
  echo "                                                \"port\": \"${port}\",">>$local_user_dbeaver_datasource
  echo "                                                \"database\": \"${database}\",">>$local_user_dbeaver_datasource
  echo "                                                \"user\": \"${user}\",">>$local_user_dbeaver_datasource
  echo "                                                \"password\": \"${password}\",">>$local_user_dbeaver_datasource
  echo "                                                \"url\": \"jdbc:postgresql://${host}:${port}/${database}\",">>$local_user_dbeaver_datasource
  echo "                                                \"type\": \"dev\",">>$local_user_dbeaver_datasource
  echo "                                                \"provider-properties\": {">>$local_user_dbeaver_datasource
  echo "                                                        \"@dbeaver-show-non-default-db@\": \"false\",">>$local_user_dbeaver_datasource
  echo "                                                        \"@dbeaver-show-template-db@\": \"false\",">>$local_user_dbeaver_datasource
  echo "                                                        \"postgresql.dd.plain.string\": \"false\",">>$local_user_dbeaver_datasource
  echo "                                                        \"postgresql.dd.tag.string\": \"false\"">>$local_user_dbeaver_datasource
  echo "                                                },">>$local_user_dbeaver_datasource
  echo "                                                \"auth-model\": \"native\"">>$local_user_dbeaver_datasource
  echo "                                        }">>$local_user_dbeaver_datasource
  echo "                                }">>$local_user_dbeaver_datasource
}
writeDatasourceMysql() {
  local index=$1
  local name=$2
  local host=$3
  local port=$4
  local database=$5
  local user=$6
  local password=$7
  if [[ "$index" != "1" ]]; then
    echo ",">>$local_user_dbeaver_datasource
  fi
  echo "                \"mysql8-${index}\": {">>$local_user_dbeaver_datasource
  echo "                                        \"provider\": \"mysql\",">>$local_user_dbeaver_datasource
  echo "                                        \"driver\": \"mysql8\",">>$local_user_dbeaver_datasource
  echo "                                        \"name\": \"${name}\",">>$local_user_dbeaver_datasource
  echo "                                        \"save-password\": true,">>$local_user_dbeaver_datasource
  echo "                                        \"show-system-objects\": true,">>$local_user_dbeaver_datasource
  echo "                                        \"read-only\": false,">>$local_user_dbeaver_datasource
  echo "                                        \"configuration\": {">>$local_user_dbeaver_datasource
  echo "                                                \"host\": \"${host}\",">>$local_user_dbeaver_datasource
  echo "                                                \"port\": \"${port}\",">>$local_user_dbeaver_datasource
  echo "                                                \"database\": \"${database}\",">>$local_user_dbeaver_datasource
  echo "                                                \"user\": \"${user}\",">>$local_user_dbeaver_datasource
  echo "                                                \"password\": \"${password}\",">>$local_user_dbeaver_datasource
  echo "                                                \"url\": \"jdbc:mysql://${host}:${port}/${database}\",">>$local_user_dbeaver_datasource
  echo "                                                \"type\": \"dev\",">>$local_user_dbeaver_datasource
  echo "                                                \"auth-model\": \"native\",">>$local_user_dbeaver_datasource
  echo "                                                \"handlers\": {}">>$local_user_dbeaver_datasource
  echo "                                        }">>$local_user_dbeaver_datasource
  echo "                                }">>$local_user_dbeaver_datasource
}
closeDatasource() {
  echo "        },">>$local_user_dbeaver_datasource
  echo "        \"connection-types\": {">>$local_user_dbeaver_datasource
  echo "                \"dev\": {">>$local_user_dbeaver_datasource
  echo "                        \"name\": \"Development\",">>$local_user_dbeaver_datasource
  echo "                        \"color\": \"255,255,255\",">>$local_user_dbeaver_datasource
  echo "                        \"description\": \"Regular development database\",">>$local_user_dbeaver_datasource
  echo "                        \"auto-commit\": true,">>$local_user_dbeaver_datasource
  echo "                        \"confirm-execute\": false,">>$local_user_dbeaver_datasource
  echo "                        \"confirm-data-change\": false">>$local_user_dbeaver_datasource
  echo "                }">>$local_user_dbeaver_datasource
  echo "        }">>$local_user_dbeaver_datasource
  echo "}">>$local_user_dbeaver_datasource
}
initRobo3tConnection() {
  $(delFileIfExist $local_user_robo3t_connection)
  echo "{">>$local_user_robo3t_connection
  echo " \"acceptedEulaVersions\" : [">>$local_user_robo3t_connection
  echo "  \"${robo3t_version}\"">>$local_user_robo3t_connection
  echo " ],">>$local_user_robo3t_connection
  echo " \"anonymousID\" : \"5d56cac1-c013-4c1a-85e4-668b4172d801\",">>$local_user_robo3t_connection
  echo " \"autoExec\" : true,">>$local_user_robo3t_connection
  echo " \"autoExpand\" : false,">>$local_user_robo3t_connection
  echo " \"autocompletionMode\" : 1,">>$local_user_robo3t_connection
  echo " \"batchSize\" : 50,">>$local_user_robo3t_connection
  echo " \"cacheData\" : {">>$local_user_robo3t_connection
  echo "">>$local_user_robo3t_connection
  echo " },">>$local_user_robo3t_connection
  echo " \"checkForUpdates\" : true,">>$local_user_robo3t_connection
  echo " \"connections\" : [">>$local_user_robo3t_connection
}
writeCompassConnection() {
  local hostname=$1
  local pemLocation=$2
  local uuid=$(uuidgen)
  local output=$local_user_compass_connections_path/$uuid.json
  local currentDate=$(date +%s)
  local pemLocationURI=$(echo $pemLocation | sed 's/\//%2F/g')
  printf "%s" "{">"$output"
  printf "%s" "  \"_id\": \"$uuid\",">>"$output"
  printf "%s" "  \"connectionInfo\": {">>"$output"
  printf "%s" "     \"id\": \"$uuid\",">>"$output"
  printf "%s" "     \"connectionOptions\": {">>"$output"
  printf "%s" "       \"connectionString\": \"mongodb+srv://$hostname/?authMechanism=MONGODB-X509&authSource=%24external&tls=true&tlsCertificateKeyFile=$pemLocationURI&tlsCAFile=$pemLocationURI&tlsAllowInvalidCertificates=true\",">>"$output"
  printf "%s" "       \"oidc\": {}">>"$output"
  printf "%s" "    },">>"$output"
  printf "%s" "  \"savedConnectionType\": \"favorite\",">>"$output"
  printf "%s" "  \"favorite\": {">>"$output"
  printf "%s" "     \"name\": \"$USER\"">>"$output"
  printf "%s" "   }">>"$output"
  printf "%s" "   },">>"$output"
  printf "%s" " \"version\": 1">>"$output"
  printf "%s" "}">>"$output"
}
writeCompassConnection_back() {
  local hostname=$1
  local port=$2
  local hosts=$3
  local replicaset=$4
  local user=$5
  local pemLocation=$6
  local uuid=$(uuidgen)
  local output=$local_user_compass_connections_path/$uuid.json
  local currentDate=$(date +%s)000
  printf "%s" "{\"isSrvRecord\":true,">"$output"
  printf "%s" "\"hostname\":\"$hostname\",">>"$output"
  printf "%s" "\"port\":$port,">>"$output"
  printf "%s" "\"hosts\":$hosts,">>"$output"
  printf "%s" "\"extraOptions\":{},">>"$output"
  printf "%s" "\"connectionType\":\"NODE_DRIVER\",">>"$output"
  printf "%s" "\"authStrategy\":\"X509\",">>"$output"
  printf "%s" "\"replicaSet\":\"$replicaset\",">>"$output"
  #printf "%s" "\"compression\":null,">>"$output"
  printf "%s" "\"readPreference\":\"primary\",">>"$output"
  #printf "%s" "\"authSource\":\"\$external\",">>"$output"
  printf "%s" "\"authSource\":\"admin\",">>"$output"
  printf "%s" "\"appname\":\"MongoDB Compass\",">>"$output"
  printf "%s" "\"kerberosCanonicalizeHostname\":false,">>"$output"
  printf "%s" "\"ssl\":true,">>"$output"
  printf "%s" "\"sslMethod\":\"ALL\",">>"$output"

  #printf "%s" "\"authMechanism\":\"MONGODB-X509\",">>"$output"
  #printf "%s" "\"authMechanismProperties\":null,">>"$output"
  #printf "%s" "\"appname\":\"MongoDB Compass\",">>"$output"
  #printf "%s" "\"kerberosCanonicalizeHostname\":false,">>"$output"
  #printf "%s" "\"x509Username\":\"CN=$user\",">>"$output"
  #printf "%s" "\"ssl\":true,">>"$output"
  #printf "%s" "\"sslMethod\":\"ALL\",">>"$output"
  printf "%s" "\"sslCA\":[\"$pemLocation\"],">>"$output"
  printf "%s" "\"sslCert\":[\"$pemLocation\"],">>"$output"
  printf "%s" "\"sslKey\":[\"$pemLocation\"],">>"$output"
  printf "%s" "\"sshTunnel\":\"NONE\",">>"$output"
  printf "%s" "\"sshTunnelPort\":22,">>"$output"
  printf "%s" "\"_id\":\"$uuid\",">>"$output"
  printf "%s" "\"lastUsed\":$currentDate,">>"$output"
  printf "%s" "\"isFavorite\":true,">>"$output"
  printf "%s" "\"name\":\"$USER\"}">>"$output"
}
writeRobo3tConnection() {
  local env=$1
  local host=$2
  local port=$3
  local database=$4
  local user=$5
  local password=$6
  local sia=$7
  local isReplicaset$8
  local sslCALocation=$9
  local ownUUID=$(uuidgen)
  echo "  {">>$local_user_robo3t_connection
  echo "   \"connectionName\" : \"${sia}-${env}\",">>$local_user_robo3t_connection
  echo "   \"credentials\" : [">>$local_user_robo3t_connection
  echo "      {">>$local_user_robo3t_connection
  echo "       \"databaseName\" : \"${database}\",">>$local_user_robo3t_connection
  echo "       \"enabled\" : true,">>$local_user_robo3t_connection
  echo "       \"mechanism\" : \"SCRAM-SHA-1\",">>$local_user_robo3t_connection
  echo "       \"userName\" : \"${user}\",">>$local_user_robo3t_connection
  echo "       \"userPassword\" : \"${password}\"">>$local_user_robo3t_connection
  echo "      }">>$local_user_robo3t_connection
  echo "    ],">>$local_user_robo3t_connection
  echo "   \"defaultDatabase\" : \"${database}\",">>$local_user_robo3t_connection
  echo "   \"isReplicaSet\" : ${isReplicaset},">>$local_user_robo3t_connection
  echo "   \"serverHost\" : \"${host}\",">>$local_user_robo3t_connection
  echo "   \"serverPort\" : ${port},">>$local_user_robo3t_connection
  echo "   \"ssh\" : {">>$local_user_robo3t_connection
  echo "    \"askPassword\" : false,">>$local_user_robo3t_connection
  echo "    \"enabled\" : false,">>$local_user_robo3t_connection
  echo "    \"host\" : \"\",">>$local_user_robo3t_connection
  echo "    \"method\" : \"publickey\",">>$local_user_robo3t_connection
  echo "    \"passphraseEncrypted\" : \"\",">>$local_user_robo3t_connection
  echo "    \"port\" : 22,">>$local_user_robo3t_connection
  echo "    \"privateKeyFile\" : \"\",">>$local_user_robo3t_connection
  echo "    \"publicKeyFile\" : \"\",">>$local_user_robo3t_connection
  echo "    \"userName\" : \"\",">>$local_user_robo3t_connection
  echo "    \"userPasswordEncrypted\" : \"\"">>$local_user_robo3t_connection
  echo "   },">>$local_user_robo3t_connection
  echo "   \"ssl\" : {">>$local_user_robo3t_connection
  echo "    \"allowInvalidCertificates\" : false,">>$local_user_robo3t_connection
  echo "    \"allowInvalidHostnames\" : false,">>$local_user_robo3t_connection
  echo "    \"askPassphrase\" : false,">>$local_user_robo3t_connection
  echo "    \"caFile\" : \"${sslCALocation}\",">>$local_user_robo3t_connection
  echo "    \"crlFile\" : \"\",">>$local_user_robo3t_connection
  echo "    \"pemKeyFile\" : \"\",">>$local_user_robo3t_connection
  echo "    \"pemPassPhraseEncrypted\" : \"\",">>$local_user_robo3t_connection
  echo "    \"sslEnabled\" : true,">>$local_user_robo3t_connection
  echo "    \"useAdvancedOptions\" : false,">>$local_user_robo3t_connection
  echo "    \"usePemFile\" : false">>$local_user_robo3t_connection
  echo "   },">>$local_user_robo3t_connection
  echo "   \"uuid\" : \"${ownUUID}\"">>$local_user_robo3t_connection
  echo "  }">>$local_user_robo3t_connection
} 
closeRobo3tConnection() {
  echo " ],">>$local_user_robo3t_connection
  echo " \"dbVersionsConnected\" : [">>$local_user_robo3t_connection
  echo "  \"${mongodb_version}\"">>$local_user_robo3t_connection
  echo " ],">>$local_user_robo3t_connection
  echo " \"disableConnectionShortcuts\" : false,">>$local_user_robo3t_connection
  echo " \"imported\" : false,">>$local_user_robo3t_connection
  echo " \"lineNumbers\" : false,">>$local_user_robo3t_connection
  echo " \"loadMongoRcJs\" : false,">>$local_user_robo3t_connection
  echo " \"minimizeToTray\" : false,">>$local_user_robo3t_connection
  echo " \"mongoTimeoutSec\" : 10,">>$local_user_robo3t_connection
  echo " \"programExitedNormally\" : true,">>$local_user_robo3t_connection
  echo " \"shellTimeoutSec\" : 15,">>$local_user_robo3t_connection
  echo " \"style\" : \"Native\",">>$local_user_robo3t_connection
  echo " \"textFontFamily\" : \"\",">>$local_user_robo3t_connection
  echo " \"textFontPointSize\" : -1,">>$local_user_robo3t_connection
  echo " \"timeZone\" : 0,">>$local_user_robo3t_connection
  echo " \"toolbars\" : {">>$local_user_robo3t_connection
  echo "  \"connect\" : true,">>$local_user_robo3t_connection
  echo "  \"exec\" : true,">>$local_user_robo3t_connection
  echo "  \"explorer\" : true,">>$local_user_robo3t_connection
  echo "  \"logs\" : false,">>$local_user_robo3t_connection
  echo "  \"open_save\" : true">>$local_user_robo3t_connection
  echo " },">>$local_user_robo3t_connection
  echo " \"useHttps\" : false,">>$local_user_robo3t_connection
  echo " \"uuidEncoding\" : 0,">>$local_user_robo3t_connection
  echo " \"version\" : \"2.0\",">>$local_user_robo3t_connection
  echo " \"viewMode\" : 1">>$local_user_robo3t_connection
  echo "}">>$local_user_robo3t_connection
}
initCredential () {
  $(delFileIfExist $local_user_dbeaver_credential)
  printf "%s" "{">>$local_user_dbeaver_credential
}
writeCredential () {
  local index=$1
  local name=$2
  local user=$3
  local password=$4
  if [[ "$index" != "1" ]]; then
    printf "%s" ",">>$local_user_dbeaver_credential
  fi
  printf "%s" "\"${name}\":{\"#connection\":{\"user\":\"${user}\",\"password\":\"${password}\"}}">>$local_user_dbeaver_credential
}
closeCredential () {
  printf "%s" "}">>$local_user_dbeaver_credential
}
updateDrivers () {
  local user_input=$1
  dbType=$(getVaultFieldFromUser $user_input tool)
  version=$(getVaultFieldFromUser $user_input versionServer)
  first="${version:0:2}"
  second="${version:0:3}"
  case "$dbType" in
    'dbeaver-pgsql')
      dbType="postgresql"
      case "$first" in
        '10')#version 10
          clientPath=$pgsql_10
        ;;
        '11')#version 11
          clientPath=$pgsql_11
        ;;
        '12')#version 12
          clientPath=$pgsql_12
        ;;
        '*')
          case "$second" in
            '9.5')#version 9.5
              clientPath=$pgsql_95
            ;;
            '9.6')#version 9.6
              clientPath=$pgsql_96
            ;;
            '*')#version not implemented
              #echo "Driver not yet implemented."
            ;;
          esac
        ;;
      esac
    ;;
    'dbeaver-mysql')
      dbType="mysql"
      case "$second" in
        '5.6')#version 5.6
          clientPath=$mysql_56
        ;;
        '5.7')#version 5.7
          clientPath=$mysql_57
        ;;
        '8.0')#version 8.0
          clientPath=$mysql_80
        ;;
        '*')#version not implemented
          #echo "Driver not yet implemented."
        ;;
      esac
    ;;
    '*')
      #echo  "No driver to update."
    ;;
  esac
  #if the natif client is find implement it
  if [ ! -z "$clientPath" ]; then
    xmlstarlet ed -d "//drivers/provider[@id='$dbType']//clientHome" /home/$user_input/.local/share/DBeaverData/workspace6/.metadata/.plugins/org.jkiss.dbeaver.core/drivers.xml > /tmp/$user_input_drivers.xml
    mv -f /tmp/$user_input_drivers.xml /home/$user_input/.local/share/DBeaverData/workspace6/.metadata/.plugins/org.jkiss.dbeaver.core/drivers.xml
    xmlstarlet ed -s "//drivers/provider[@id='$dbType']" -t elem -n clientHome -v "" -i "//drivers/provider[@id='$dbType']/clientHome" -t attr -n id -v $clientPath -i "//drivers/provider[@id='$dbType']/clientHome" -t attr -n path -v $clientPath /home/$user_input/.local/share/DBeaverData/workspace6/.metadata/.plugins/org.jkiss.dbeaver.core/drivers.xml > /tmp/$user_input_drivers.xml
    mv -f /tmp/$user_input_drivers.xml /home/$user_input/.local/share/DBeaverData/workspace6/.metadata/.plugins/org.jkiss.dbeaver.core/drivers.xml
  fi
}
